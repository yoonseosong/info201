"Discharges" = sum(sys_dsch, na.rm = T),
"Interns and residents" = sum(sys_res, na.rm = T)) %>%
mutate(fips = fips(health_sys_state))
state_shape <- map_data("state") %>%
rename(state = region) %>%
mutate(fips = fips(state)) %>%
left_join(state_sum, by = "fips")
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = ("Physicians")),
color = "black",
size = 0.1
) +
coord_map() +
#scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = ("Physicians")),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize("Physicians" = sum(total_mds, na.rm = T),
"Primary care physicians" = sum(prim_care_mds, na.rm = T),
"Medical groups" = sum(grp_cnt, na.rm = T),
"Hospitals" = sum(hosp_cnt, na.rm = T),
"Non-Federal general acute care hospitals" = sum(acutehosp_cnt, na.rm = T),
"Multistate system" = sum(sys_multistate, na.rm = T),
"Beds" = sum(sys_beds, na.rm = T),
"Discharges" = sum(sys_dsch, na.rm = T),
"Interns and residents" = sum(sys_res, na.rm = T)) %>%
mutate(fips = fips(health_sys_state))
state_shape <- map_data("state") %>%
rename(state = region) %>%
mutate(fips = fips(state)) %>%
left_join(state_sum, by = "fips")
View(state_shape)
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = ("Physicians")),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = Physicians),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = Medical groups),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = "Medical groups"),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
colnames(state_shape)
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = Beds),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = beds),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T),
non-Federal_general_acute_care_hospitals = sum(acutehosp_cnt, na.rm = T),
multistate_system = sum(sys_multistate, na.rm = T),
beds = sum(sys_beds, na.rm = T),
discharges = sum(sys_dsch, na.rm = T),
interns_and_residents = sum(sys_res, na.rm = T)) %>%
mutate(fips = fips(health_sys_state))
state_shape <- map_data("state") %>%
rename(state = region) %>%
mutate(fips = fips(state)) %>%
left_join(state_sum, by = "fips")
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = beds),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
View(state_shape)
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T),
non-Federal_general_acute_care_hospitals = sum(acutehosp_cnt, na.rm = T),
multistate_system = sum(sys_multistate, na.rm = T),
beds = sum(sys_beds, na.rm = T),
discharges = sum(sys_dsch, na.rm = T),
interns_and_residents = sum(sys_res, na.rm = T)) %>%
mutate(fips = fips(health_sys_state))
state_shape <- map_data("state") %>%
rename(state = region) %>%
mutate(fips = fips(state)) %>%
left_join(state_sum, by = "fips")
View(dat)
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T),
non-Federal_general_acute_care_hospitals = sum(acutehosp_cnt, na.rm = T),
multistate_system = sum(sys_multistate, na.rm = T),
beds = sum(sys_beds, na.rm = T),
discharges = sum(sys_dsch, na.rm = T),
interns_and_residents = sum(sys_res, na.rm = T)) %>%
mutate(fips = fips(health_sys_state))
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T)
)
View(state_sum)
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T),
non-Federal_general_acute_care_hospitals = sum(acutehosp_cnt, na.rm = T),
multistate_system = sum(sys_multistate, na.rm = T),
beds = sum(sys_beds, na.rm = T),
discharges = sum(sys_dsch, na.rm = T),
interns_and_residents = sum(sys_res, na.rm = T))
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T),
non_Federal_general_acute_care_hospitals = sum(acutehosp_cnt, na.rm = T),
multistate_system = sum(sys_multistate, na.rm = T),
beds = sum(sys_beds, na.rm = T),
discharges = sum(sys_dsch, na.rm = T),
interns_and_residents = sum(sys_res, na.rm = T))
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T),
non_Federal_general_acute_care_hospitals = sum(acutehosp_cnt, na.rm = T),
multistate_system = sum(sys_multistate, na.rm = T),
beds = sum(sys_beds, na.rm = T),
discharges = sum(sys_dsch, na.rm = T),
interns_and_residents = sum(sys_res, na.rm = T)) %>%
mutate(fips = fips(health_sys_state))
state_shape <- map_data("state") %>%
rename(state = region) %>%
mutate(fips = fips(state)) %>%
left_join(state_sum, by = "fips")
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = beds),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
mymap
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = non_Federal_general_acute_care_hospitals),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
runApp()
runApp()
chosen_resource <- "beds"
mymap <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = as.symbol(chosen_resource)),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = chosen_resource,
fill = chosen_resource)
mymap
chosen_resource
as.symbol(chosen_resource)
test <- beds
test <- "beds"
state_shape$test
state_shape$as.symbol(test)
state_shape[[test]]
chosen_resource <- "beds"
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = [[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = chosen_resource,
fill = chosen_resource)
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = [[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = chosen_resource,
fill = chosen_resource)
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = state_shape[[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = chosen_resource,
fill = chosen_resource)
chosen_resource <- "physicians"
mymap <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = state_shape[[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = chosen_resource,
fill = chosen_resource)
mymap
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = .data[[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = chosen_resource,
fill = chosen_resource)
runApp()
runApp()
runApp()
runApp()
choice_name <- c("Number of physicians", "Number of primary care physicians",
"Number of medical groups", "Number of hospitals",
"Number of non-Federal general acute care hospitals",
"Multistate system", "Number of beds", "Number of discharges",
"Number of interns and residents")
code_name <- c("physicians", "primary_care_physicians", "medical_groups",
"hospitals", "non_federal_general_acute_care_hospitals",
"multistate_system", "beds", "discharges", "interns_and_residents")
column_names <- data.frame(choice_name, code_name)
View(column_names)
column_names[["Number of beds"]]
column_names[[Number of beds]]
get("Number of beds")
column_names$code_name[["Number of beds"]]
column_names["Number of beds", ]
column_names$choice_name
column_names$code_name["Number of beds", ]
column_names$code_name["Number of beds"]
column_names$code_name[choice_name == "Number of beds"]
test <- "Number of interns and residents"
column_names$code_name[choice_name == test]
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
plot <- ggplot(data = mds_and_pop) +
geom_bar(x = state, y = ratio) +
co0rd_flip()
output$bar_graph <- renderPlotly({
plot <- ggplot(data = mds_and_pop) +
geom_bar(x = "state", y = "ratio") +
co0rd_flip()
ggplotly(plot)
})
source('C:/Users/racha/Desktop/info201p/info201/shinyAppFinal/app_server.R', echo=TRUE)
# convert state names to state abbreviations
state_dat <- state_dat %>%
mutate(state = state.abb[match(NAME, state.name)])
# sum of medics by state
sum_total_mds <- dat %>%
group_by(health_sys_state) %>%
summarize(sum_total_mds = sum(total_mds, na.rm = T)) %>%
rename(state = health_sys_state)
# population by state
state_pop_2018 <- state_dat %>%
group_by(state) %>%
summarize(pop = sum(POPESTIMATE2018, na.rm = T))
# join sum_total_mds and state_pop_2018
# and calculating ratio of medics to population
mds_and_pop <- left_join(sum_total_mds, state_pop_2018) %>%
mutate(ratio = sum_total_mds/pop)
#server
server <- function(input, output){
output$map <- renderPlot({
choice_name <- c("Physicians", "Primary care physicians", "Medical groups",
"Hospitals", "Non-Federal general acute care hospitals",
"Multistate system", "Beds", "Discharges", "Interns and residents")
code_name <- c("physicians", "primary_care_physicians", "medical_groups",
"hospitals", "non_federal_general_acute_care_hospitals",
"multistate_system", "beds", "discharges", "interns_and_residents")
column_names <- data.frame(choice_name, code_name)
chosen_resource = column_names$code_name[choice_name == input$resource]
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T),
non_federal_general_acute_care_hospitals = sum(acutehosp_cnt, na.rm = T),
multistate_system = sum(sys_multistate, na.rm = T),
beds = sum(sys_beds, na.rm = T),
discharges = sum(sys_dsch, na.rm = T),
interns_and_residents = sum(sys_res, na.rm = T)) %>%
mutate(fips = fips(health_sys_state))
state_shape <- map_data("state") %>%
rename(state = region) %>%
mutate(fips = fips(state)) %>%
left_join(state_sum, by = "fips")
# Define a minimalist theme for map
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()
)
# Draw the map using a map-based coordinate system
resource_map <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = .data[[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = input$resource,
fill = input$resource) +
blank_theme
resource_map
})
output$bar_graph <- renderPlotly({
plot <- ggplot(data = mds_and_pop) +
geom_bar(x = "state", y = "ratio") +
co0rd_flip()
ggplotly(plot)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(state_dat)
state.name
runApp()
state_dat_selected <- state_dat %>%
group_by(state, RACE) %>%
summarize(pop = sum(POPESTIMATE2018, na.rm = T)) %>%
# filter(state == input$state) %>%
mutate(RACE = toString(RACE))
min_ratio_state_dg[1,2] <- "White"
min_ratio_state_dg[2,2] <- "Black"
min_ratio_state_dg[3,2] <- "American Indian"
min_ratio_state_dg[4,2] <- "Asian"
min_ratio_state_dg[5,2] <- "Pacific Islander"
state_dat_selected <- state_dat %>%
group_by(state, RACE) %>%
summarize(pop = sum(POPESTIMATE2018, na.rm = T)) %>%
# filter(state == input$state) %>%
mutate(RACE = toString(RACE))
state_dat_selected[1,2] <- "White"
state_dat_selected[2,2] <- "Black"
state_dat_selected[3,2] <- "American Indian"
state_dat_selected[4,2] <- "Asian"
state_dat_selected[5,2] <- "Pacific Islander"
View(state_dat_selected)
state_dat_selected2 <- state_dat %>%
group_by(state, RACE) %>%
summarize(pop = sum(POPESTIMATE2018, na.rm = T))
View(state_dat_selected)
View(state_dat_selected2)
state_pop <- state_dat %>%
group_by(NAME) %>%
summarise(total_pop = sum(POPESTIMATE2018, na.rm = T))
View(state_pop)
leftjoin(state_dat_selected, state_dat)
left_join(state_dat_selected, state_dat)
left_join(state_dat_selected, state_pop, by=NAME)
left_join(state_dat_selected, state_pop, by="NAME")
left_join(state_dat_selected, state_pop)
source('C:/Users/racha/Desktop/info201p/info201/shinyAppFinal/app_server.R', echo=TRUE)
state_dat_selected <- left_join(state_dat_selected, state_pop)
state_pop <- state_dat %>%
group_by(NAME) %>%
summarise(total_pop = sum(POPESTIMATE2018, na.rm = T))
state_dat_selected <- state_dat %>%
group_by(NAME, RACE) %>%
summarize(pop = sum(POPESTIMATE2018, na.rm = T)) %>%
filter(NAME == input$state) %>%
mutate(RACE = toString(RACE))
state_dat_selected <- left_join(state_dat_selected, state_pop)
state_pop <- state_dat %>%
group_by(NAME) %>%
summarise(total_pop = sum(POPESTIMATE2018, na.rm = T))
state_dat_selected <- state_dat %>%
group_by(NAME, RACE) %>%
summarize(pop = sum(POPESTIMATE2018, na.rm = T)) %>%
# filter(NAME == input$state) %>%
mutate(RACE = toString(RACE))
state_dat_selected <- left_join(state_dat_selected, state_pop)
View(state_dat_selected)
state_dat_selected <- left_join(state_dat_selected, state_pop) %>%
mutate(percent = (pop/total_pop)*100)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(ggplot2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
scatterData <- dat %>%
select(sys_beds, total_mds, sys_dsch, health_sys_state)
#Import data
dat <- read.csv("https://www.ahrq.gov/sites/default/files/wysiwyg/chsp/compendium/chsp-compendium-2018.csv")
scatterData <- dat %>%
select(sys_beds, total_mds, sys_dsch, health_sys_state)
runApp()
runApp()
runApp()
runApp()
runApp()
