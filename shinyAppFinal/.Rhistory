summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T),
non_Federal_general_acute_care_hospitals = sum(acutehosp_cnt, na.rm = T),
multistate_system = sum(sys_multistate, na.rm = T),
beds = sum(sys_beds, na.rm = T),
discharges = sum(sys_dsch, na.rm = T),
interns_and_residents = sum(sys_res, na.rm = T))
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T),
non_Federal_general_acute_care_hospitals = sum(acutehosp_cnt, na.rm = T),
multistate_system = sum(sys_multistate, na.rm = T),
beds = sum(sys_beds, na.rm = T),
discharges = sum(sys_dsch, na.rm = T),
interns_and_residents = sum(sys_res, na.rm = T)) %>%
mutate(fips = fips(health_sys_state))
state_shape <- map_data("state") %>%
rename(state = region) %>%
mutate(fips = fips(state)) %>%
left_join(state_sum, by = "fips")
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = beds),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
mymap
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = non_Federal_general_acute_care_hospitals),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = "chosen_resource",
fill = "chosen_resource")
runApp()
runApp()
chosen_resource <- "beds"
mymap <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = as.symbol(chosen_resource)),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = chosen_resource,
fill = chosen_resource)
mymap
chosen_resource
as.symbol(chosen_resource)
test <- beds
test <- "beds"
state_shape$test
state_shape$as.symbol(test)
state_shape[[test]]
chosen_resource <- "beds"
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = [[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = chosen_resource,
fill = chosen_resource)
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = [[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = chosen_resource,
fill = chosen_resource)
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = state_shape[[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = chosen_resource,
fill = chosen_resource)
chosen_resource <- "physicians"
mymap <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = state_shape[[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = chosen_resource,
fill = chosen_resource)
mymap
ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = .data[[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = chosen_resource,
fill = chosen_resource)
runApp()
runApp()
runApp()
runApp()
choice_name <- c("Number of physicians", "Number of primary care physicians",
"Number of medical groups", "Number of hospitals",
"Number of non-Federal general acute care hospitals",
"Multistate system", "Number of beds", "Number of discharges",
"Number of interns and residents")
code_name <- c("physicians", "primary_care_physicians", "medical_groups",
"hospitals", "non_federal_general_acute_care_hospitals",
"multistate_system", "beds", "discharges", "interns_and_residents")
column_names <- data.frame(choice_name, code_name)
View(column_names)
column_names[["Number of beds"]]
column_names[[Number of beds]]
get("Number of beds")
column_names$code_name[["Number of beds"]]
column_names["Number of beds", ]
column_names$choice_name
column_names$code_name["Number of beds", ]
column_names$code_name["Number of beds"]
column_names$code_name[choice_name == "Number of beds"]
test <- "Number of interns and residents"
column_names$code_name[choice_name == test]
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
plot <- ggplot(data = mds_and_pop) +
geom_bar(x = state, y = ratio) +
co0rd_flip()
output$bar_graph <- renderPlotly({
plot <- ggplot(data = mds_and_pop) +
geom_bar(x = "state", y = "ratio") +
co0rd_flip()
ggplotly(plot)
})
source('C:/Users/racha/Desktop/info201p/info201/shinyAppFinal/app_server.R', echo=TRUE)
# convert state names to state abbreviations
state_dat <- state_dat %>%
mutate(state = state.abb[match(NAME, state.name)])
# sum of medics by state
sum_total_mds <- dat %>%
group_by(health_sys_state) %>%
summarize(sum_total_mds = sum(total_mds, na.rm = T)) %>%
rename(state = health_sys_state)
# population by state
state_pop_2018 <- state_dat %>%
group_by(state) %>%
summarize(pop = sum(POPESTIMATE2018, na.rm = T))
# join sum_total_mds and state_pop_2018
# and calculating ratio of medics to population
mds_and_pop <- left_join(sum_total_mds, state_pop_2018) %>%
mutate(ratio = sum_total_mds/pop)
#server
server <- function(input, output){
output$map <- renderPlot({
choice_name <- c("Physicians", "Primary care physicians", "Medical groups",
"Hospitals", "Non-Federal general acute care hospitals",
"Multistate system", "Beds", "Discharges", "Interns and residents")
code_name <- c("physicians", "primary_care_physicians", "medical_groups",
"hospitals", "non_federal_general_acute_care_hospitals",
"multistate_system", "beds", "discharges", "interns_and_residents")
column_names <- data.frame(choice_name, code_name)
chosen_resource = column_names$code_name[choice_name == input$resource]
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T),
non_federal_general_acute_care_hospitals = sum(acutehosp_cnt, na.rm = T),
multistate_system = sum(sys_multistate, na.rm = T),
beds = sum(sys_beds, na.rm = T),
discharges = sum(sys_dsch, na.rm = T),
interns_and_residents = sum(sys_res, na.rm = T)) %>%
mutate(fips = fips(health_sys_state))
state_shape <- map_data("state") %>%
rename(state = region) %>%
mutate(fips = fips(state)) %>%
left_join(state_sum, by = "fips")
# Define a minimalist theme for map
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()
)
# Draw the map using a map-based coordinate system
resource_map <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = .data[[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = input$resource,
fill = input$resource) +
blank_theme
resource_map
})
output$bar_graph <- renderPlotly({
plot <- ggplot(data = mds_and_pop) +
geom_bar(x = "state", y = "ratio") +
co0rd_flip()
ggplotly(plot)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(state_dat)
state.name
runApp()
state_dat_selected <- state_dat %>%
group_by(state, RACE) %>%
summarize(pop = sum(POPESTIMATE2018, na.rm = T)) %>%
# filter(state == input$state) %>%
mutate(RACE = toString(RACE))
min_ratio_state_dg[1,2] <- "White"
min_ratio_state_dg[2,2] <- "Black"
min_ratio_state_dg[3,2] <- "American Indian"
min_ratio_state_dg[4,2] <- "Asian"
min_ratio_state_dg[5,2] <- "Pacific Islander"
state_dat_selected <- state_dat %>%
group_by(state, RACE) %>%
summarize(pop = sum(POPESTIMATE2018, na.rm = T)) %>%
# filter(state == input$state) %>%
mutate(RACE = toString(RACE))
state_dat_selected[1,2] <- "White"
state_dat_selected[2,2] <- "Black"
state_dat_selected[3,2] <- "American Indian"
state_dat_selected[4,2] <- "Asian"
state_dat_selected[5,2] <- "Pacific Islander"
View(state_dat_selected)
state_dat_selected2 <- state_dat %>%
group_by(state, RACE) %>%
summarize(pop = sum(POPESTIMATE2018, na.rm = T))
View(state_dat_selected)
View(state_dat_selected2)
state_pop <- state_dat %>%
group_by(NAME) %>%
summarise(total_pop = sum(POPESTIMATE2018, na.rm = T))
View(state_pop)
leftjoin(state_dat_selected, state_dat)
left_join(state_dat_selected, state_dat)
left_join(state_dat_selected, state_pop, by=NAME)
left_join(state_dat_selected, state_pop, by="NAME")
left_join(state_dat_selected, state_pop)
source('C:/Users/racha/Desktop/info201p/info201/shinyAppFinal/app_server.R', echo=TRUE)
state_dat_selected <- left_join(state_dat_selected, state_pop)
state_pop <- state_dat %>%
group_by(NAME) %>%
summarise(total_pop = sum(POPESTIMATE2018, na.rm = T))
state_dat_selected <- state_dat %>%
group_by(NAME, RACE) %>%
summarize(pop = sum(POPESTIMATE2018, na.rm = T)) %>%
filter(NAME == input$state) %>%
mutate(RACE = toString(RACE))
state_dat_selected <- left_join(state_dat_selected, state_pop)
state_pop <- state_dat %>%
group_by(NAME) %>%
summarise(total_pop = sum(POPESTIMATE2018, na.rm = T))
state_dat_selected <- state_dat %>%
group_by(NAME, RACE) %>%
summarize(pop = sum(POPESTIMATE2018, na.rm = T)) %>%
# filter(NAME == input$state) %>%
mutate(RACE = toString(RACE))
state_dat_selected <- left_join(state_dat_selected, state_pop)
View(state_dat_selected)
state_dat_selected <- left_join(state_dat_selected, state_pop) %>%
mutate(percent = (pop/total_pop)*100)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(ggplot2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
scatterData <- dat %>%
select(sys_beds, total_mds, sys_dsch, health_sys_state)
#Import data
dat <- read.csv("https://www.ahrq.gov/sites/default/files/wysiwyg/chsp/compendium/chsp-compendium-2018.csv")
scatterData <- dat %>%
select(sys_beds, total_mds, sys_dsch, health_sys_state)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
source("app_server.R")
runApp()
runApp()
output$map <- renderPlotly({
choice_name <- c("Physicians", "Primary care physicians", "Medical groups",
"Hospitals", "Non-Federal general acute care hospitals",
"Multistate system", "Beds", "Discharges", "Interns and residents")
code_name <- c("physicians", "primary_care_physicians", "medical_groups",
"hospitals", "non_federal_general_acute_care_hospitals",
"multistate_system", "beds", "discharges", "interns_and_residents")
column_names <- data.frame(choice_name, code_name)
chosen_resource = column_names$code_name[choice_name == input$resource]
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T),
non_federal_general_acute_care_hospitals = sum(acutehosp_cnt, na.rm = T),
multistate_system = sum(sys_multistate, na.rm = T),
beds = sum(sys_beds, na.rm = T),
discharges = sum(sys_dsch, na.rm = T),
interns_and_residents = sum(sys_res, na.rm = T)) %>%
mutate(fips = fips(health_sys_state))
state_shape <- map_data("state") %>%
rename(state = region) %>%
mutate(fips = fips(state)) %>%
left_join(state_sum, by = "fips")
# Define a minimalist theme for map
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()
)
# Draw the map using a map-based coordinate system
resource_map <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = .data[[chosen_resource]]),
color = "black",
size = 0.1
) +
coord_map() +
scale_fill_continuous(low = "white", high = "blue") +
labs(title = input$resource,
fill = input$resource) +
blank_theme
ggplotly(resource_map)
})
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
View(dat)
source('C:/Users/racha/Desktop/info201p/info201/shinyAppFinal/app_server.R', echo=TRUE)
runApp()
runApp()
state_dat <- read.csv("https://www2.census.gov/programs-surveys/popest/tables/2010-2019/state/asrh/sc-est2019-alldata5.csv",
stringsAsFactors = FALSE)
View(state_dat)
runApp()
shiny::runApp()
# Summary Takeaways
page_five <- tabPanel(
"Summary",
mainPanel(
includeCSS("style.css"),
tags$body(
tags$header(
tags$h1("Summary Takeaways")
),
# img
tags$img("", src= "healthcare.png", height = 240, width = 800)),
tags$h3("Trends between racial demographics and resources"),
# Paragraph
tags$p("It is clear through the data and our visualization tools that there
is a correlation between health resources and racial demographics. For
instance, when comparing Nevada and Kansas using the scatter plot, two
states that have similar population sizes (NV: 12.72M, KS: 12.02M), Kansas
has significantly more beds, physicians, and discharges than Nevada. When
comparing the demographics of these two states, Nevada has a much larger
proportion of minorities than Kansas (Nevada is 25.6% nonwhite and Kansas
is only 15.4% nonwhite). Additionally, the map reveals that the most beds,
hospitals, and discharges are in Tennessee, which has a much smaller overall
population than California and New York, two states that have a much larger
proportion of minorities.
"),
#images
tags$img(src= "splot.png", height = 357, width = 544),
tags$img(src= "race.png", height = 256, width = 504.67),
## Key take away 2
tags$h3("Correlation of resources to discharges"),
# Paragraph
tags$p("Our visuals indicated the clear correlation between the hospital
resources to the total number of discharges by state. The common trend
in each state and shows that a higher level of resource density directly
relates to a higher number of patient discharges. Specifically, the
interactive map visualization showed that. California has the highest
number of physicians and medical groups but Tennessee has the highest
number of hospitals, beds, and discharges. This in connection with our
interactive scatterplot visualization presents the assumption that
discharges are more influenced by hospitals and beds more so than medics.
This was an important component of our data research and accomplished one
of our key questions of what resource is the most crucial to the
effectiveness of healthcare systems."),
#images
tags$img(src= "map1.png", height = 314, width = 430),
tags$img(src= "map2.png", height = 314, width = 440),
## Key take away 3
tags$h3("Comparing between states"),
# Paragraph
tags$p("Our visuals were all grouped by state to create a common factor to
compare our other variables. Though separately, our data visuals might not
necessarily indicate key components of our project set, by seeing the common
trends together you can see important data points where similar patterns arise.
In our 3D scatterplot visualization, we evaluated the total physicians and
total beds with total discharges by different states. This visualization
allows us to see the patterns and fluctuations between different states
through different variations on one plot. One trend we saw when comparing
the different states in that visual was that overall, with less physicians (and less bed space)
there was a significantly less amount of discharges. Using the scatter plot there was a relatively
strong correlation accross these three variables. Additionally, we can note that thes states
with less physicians and beds also have lesser amounts of other healthcare resources
(in reference to the map) with less assortments available. A possible factor that could
influence the accessibility of healthcare could be population density, such as the most populous
state of California having the highest number in the three scatterplot fields."),
#image
p(img("", src= "plotpic.jpg", height = 315, width = 600))
lifecycle::last_warnings()
state_sum <- dat %>%
group_by(health_sys_state) %>%
summarize(physicians = sum(total_mds, na.rm = T),
primary_care_physicians = sum(prim_care_mds, na.rm = T),
medical_groups = sum(grp_cnt, na.rm = T),
hospitals = sum(hosp_cnt, na.rm = T),
non_federal_general_acute_care_hospitals = sum(acutehosp_cnt, na.rm = T),
multistate_system = sum(sys_multistate, na.rm = T),
beds = sum(sys_beds, na.rm = T),
discharges = sum(sys_dsch, na.rm = T),
interns_and_residents = sum(sys_res, na.rm = T)) %>%
mutate(fips = fips(health_sys_state))
View(state_sum)
runApp()
rsconnect::showLogs(appName="name_of_app",streaming=TRUE)
rsconnect::showLogs(appName="info201-project",streaming=TRUE)
rsconnect::showLogs(appName="info201-project",streaming=TRUE)
runApp()
library(maps)
library(mapproj)
library(maps)
library(mapproj)
runApp()
runApp()
runApp()
library(styler)
library(lintr)
style_file("app.R")
lint("app.R")
style_file("app_server.R")
lint("app_server.R")
lint("app_server.R")
lint("app_server.R")
style_file("app_server.R")
lint("app_server.R")
lint("app_server.R")
style_file("app_ui.R")
lint("app_ui.R")
style_file("app_ui.R")
lint("app_ui.R")
lint("app_ui.R")
lint("app_ui.R")
lint("app_ui.R")
style_file("app_ui.R")
lint("app_ui.R")
